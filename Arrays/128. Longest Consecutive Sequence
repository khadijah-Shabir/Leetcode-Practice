class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        longest_length = 0
        number_travelled_map = {}

        # Initialize a dictionary to keep track of numbers that have been travelled
        for num in nums:
            number_travelled_map[num] = False

        # Iterate over each number in the list
        for num in nums:
            current_length = 1

            # Check in forward direction
            next_num = num + 1
            while next_num in number_travelled_map and not number_travelled_map[next_num]:
                # Increment the current length
                current_length += 1
                # Mark the next number as travelled
                number_travelled_map[next_num] = True
                # Move to the next number
                next_num += 1

            # Check in reverse direction
            prev_num = num - 1
            while prev_num in number_travelled_map and not number_travelled_map[prev_num]:
                # Increment the current length
                current_length += 1
                # Mark the previous number as travelled
                number_travelled_map[prev_num] = True
                # Move to the previous number
                prev_num -= 1

            # Update the longest length
            longest_length = max(longest_length, current_length)

        # Return the longest length
        return longest_length

      
